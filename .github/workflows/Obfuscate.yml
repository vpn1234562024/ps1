name: Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 17 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: 初始化仓库
        uses: actions/checkout@v4

      - name: 获取当前本地版本
        id: get_local_version
        shell: bash
        run: |
          echo -e "\033[34m[获取本地版本]\033[0m"
          if [ -f version.txt ]; then
            LOCAL_VERSION=$(cat version.txt)
            echo "当前本地版本: $LOCAL_VERSION"
          else
            echo "首次同步，没有本地版本。"
            LOCAL_VERSION=""
          fi
          echo "LOCAL_VERSION=$LOCAL_VERSION" >> $GITHUB_ENV

      - name: 获取最新 Release 信息
        id: get_release
        shell: bash
        run: |
          echo -e "\033[34m[获取最新 Release]\033[0m"
          API_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases"
          RESPONSE=$(curl -s "$API_URL")
          LATEST_RELEASE=$(echo "$RESPONSE" | jq -r '[.[] | select(.prerelease == false and .draft == false)][0]')
          TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "null" ]; then
            echo -e "\033[31m未找到最新正式版 Release，退出！\033[0m"
            exit 1
          fi
          echo "最新版本号: $TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: 判断是否需要更新
        id: check_update
        shell: bash
        run: |
          echo -e "\033[34m[判断是否需要更新]\033[0m"
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ]; then
            echo -e "\033[32m已经是最新版本，无需更新。\033[0m"
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
          else
            echo -e "\033[33m发现新版本，需要更新！\033[0m"
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
          fi

      - name: 拉取官方源码并检出标签
        if: env.UPDATE_NEEDED == 'true'
        shell: bash
        run: |
          set -e
          rm -rf upstream
          git clone https://github.com/bia-pain-bache/BPB-Worker-Panel.git upstream
          cd upstream
          git fetch --tags --force
          git checkout -q "$TAG_NAME" || git checkout -q "tags/$TAG_NAME" || true
          echo "当前 HEAD: $(git rev-parse --short HEAD || echo unknown)"
          cd ..

      - name: Set up Node.js
        if: env.UPDATE_NEEDED == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: 安装依赖（仅生产依赖）
        if: env.UPDATE_NEEDED == 'true'
        working-directory: upstream
        shell: bash
        run: npm install --production

      - name: 生成随机种子
        if: env.UPDATE_NEEDED == 'true'
        shell: bash
        run: |
          set -e
          RANDOM_SEED=$(od -An -N4 -tu4 /dev/urandom | tr -d ' ')
          echo "使用随机种子: $RANDOM_SEED"
          echo "OBFUSCATE_SEED=$RANDOM_SEED" >> $GITHUB_ENV

      - name: 打补丁：在 obfuscator 配置里注入 seed（非破坏性尝试）
        if: env.UPDATE_NEEDED == 'true'
        working-directory: upstream
        shell: bash
        run: |
          set -e
          FILE="scripts/build.js"
          if [ -f "$FILE" ]; then
            node -e '
              const fs = require("fs");
              const p = process.argv[1];
              let s = fs.readFileSync(p,"utf8");
              if (!/OBFUSCATE_SEED/.test(s)) {
                const needle = "obfs.obfuscate(minifiedCode.code, {";
                if (s.indexOf(needle) !== -1) {
                  s = s.replace(needle, needle + "\n            seed: Number(process.env.OBFUSCATE_SEED) || undefined,");
                  fs.writeFileSync(p, s);
                  console.log("已在 build.js 中注入 OBFUSCATE_SEED 支持。");
                } else {
                  console.log("未找到 obfs.obfuscate 调用点，跳过注入（后续会使用二次混淆兜底）。");
                }
              } else {
                console.log("build.js 已包含 OBFUSCATE_SEED，跳过注入。");
              }
            ' "$FILE"
          else
            echo "未找到 $FILE，无法注入；将使用后备二次混淆。"
          fi

      - name: 构建（执行官方脚本）
        if: env.UPDATE_NEEDED == 'true'
        working-directory: upstream
        env:
          OBFUSCATE_SEED: ${{ env.OBFUSCATE_SEED }}
          NODE_ENV: production
        shell: bash
        run: |
          set -e
          echo -e "\033[34m[开始构建] NODE_ENV=$NODE_ENV OBFUSCATE_SEED=$OBFUSCATE_SEED\033[0m"
          npm run build

      - name: 列出 upstream 目录及 dist（用于调试构建产物位置）
        if: env.UPDATE_NEEDED == 'true'
        working-directory: upstream
        shell: bash
        run: |
          echo -e "\n=== upstream 根目录列表 ==="
          ls -la || true
          echo -e "\n=== upstream/dist 列表（如存在） ==="
          ls -la dist || true
          echo -e "\n=== 查找可能的产物文件 ==="
          find . -maxdepth 3 -type f \( -iname "worker.js" -o -iname "_worker.js" -o -iname "worker.zip" \) -exec ls -lh {} \; || true

      - name: 定位构建产物（更鲁棒的查找：优先 dist/worker.js，再寻找任意 worker/_worker）
        if: env.UPDATE_NEEDED == 'true'
        id: locate_worker
        working-directory: upstream
        shell: bash
        run: |
          set -e
          # candidates 存绝对或相对路径（相对于 working-directory: upstream）
          candidates=()
          [ -f "dist/worker.js" ] && candidates+=("dist/worker.js")
          [ -f "dist/_worker.js" ] && candidates+=("dist/_worker.js")
          [ -f "_worker.js" ] && candidates+=("_worker.js")
          # 递归查找常见文件名（文件大小过滤为 >5k 避免匹配空文件）
          while IFS= read -r p; do candidates+=("$p"); done < <(find . -maxdepth 4 -type f \( -iname "_worker.js" -o -iname "worker.js" -o -iname "*.worker.js" \) -size +5k 2>/dev/null || true)

          # 去重
          uniq_candidates=($(printf "%s\n" "${candidates[@]}" | awk '!seen[$0]++'))

          if [ ${#uniq_candidates[@]} -eq 0 ]; then
            echo "未找到任何候选的构建产物（dist/worker.js, _worker.js, dist/worker.zip 等）"
            echo "WORKER_FOUND=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 选最大的文件（更可能是最终产物）
          largest=""
          largest_size=0
          for f in "${uniq_candidates[@]}"; do
            # 去掉前置 ./ 
            f_clean="${f#./}"
            # 取得大小（兼容不同系统）
            if stat -c%s "$f_clean" >/dev/null 2>&1; then
              sz=$(stat -c%s "$f_clean")
            else
              sz=$(stat -f%z "$f_clean" 2>/dev/null || echo 0)
            fi
            if [ "$sz" -gt "$largest_size" ]; then
              largest="$f_clean"
              largest_size="$sz"
            fi
          done

          echo "FOUND_CANDIDATES:"
          for c in "${uniq_candidates[@]}"; do echo " - $c"; done
          echo "CHOSEN: $largest (size $largest_size bytes)"

          echo "WORKER_FOUND=true" >> $GITHUB_OUTPUT
          echo "WORKER_PATH=$largest" >> $GITHUB_OUTPUT
          echo "WORKER_SIZE=$largest_size" >> $GITHUB_OUTPUT

      - name: 后备二次混淆（仅当未在 build.js 注入 seed 时，并且找到了产物）
        if: env.UPDATE_NEEDED == 'true' && steps.locate_worker.outputs.WORKER_FOUND == 'true'
        working-directory: upstream
        shell: bash
        env:
          OBFUSCATE_SEED: ${{ env.OBFUSCATE_SEED }}
          WORKER_PATH: ${{ steps.locate_worker.outputs.WORKER_PATH }}
        run: |
          set -e
          echo "WORKER_PATH from locate step: $WORKER_PATH"
          # 检查我们是否已经在 scripts/build.js 注入了 OBFUSCATE_SEED
          if grep -q "OBFUSCATE_SEED" scripts/build.js 2>/dev/null; then
            echo "构建脚本已注入 OBFUSCATE_SEED，跳过后备二次混淆。"
            exit 0
          fi

          if [ -z "$WORKER_PATH" ]; then
            echo "WORKER_PATH 为空，无法二次混淆"
            exit 1
          fi

          # 二次混淆：使用 javascript-obfuscator 强制指定 seed，覆盖原产物
          node - <<'NODE'
const fs = require('fs');
const Ob = require('javascript-obfuscator');
const path = process.env.WORKER_PATH;
const seed = Number(process.env.OBFUSCATE_SEED) || 0;
console.log('二次混淆 target path:', path, 'seed:', seed);
const code = fs.readFileSync(path, 'utf8');
const result = Ob.obfuscate(code, {
  seed,
  target: "browser",
  compact: true,
  controlFlowFlattening: false,
  deadCodeInjection: true,
  deadCodeInjectionThreshold: 0.2,
  stringArrayThreshold: 1,
  stringArrayEncoding: ["rc4"]
});
fs.writeFileSync(path, result.getObfuscatedCode(), 'utf8');
console.log('二次混淆完成:', path);
NODE

      - name: 拷贝产物到仓库根并记录版本
        if: env.UPDATE_NEEDED == 'true' && steps.locate_worker.outputs.WORKER_FOUND == 'true'
        shell: bash
        run: |
          set -e
          rm -f _worker.js version.txt
          SRC="${{ steps.locate_worker.outputs.WORKER_PATH }}"
          # 如果路径不是以 / 开头，前缀 upstream/
          if [[ "$SRC" = /* ]]; then
            cp -f "$SRC" ./_worker.js
          else
            cp -f "upstream/$SRC" ./_worker.js
          fi
          echo "$TAG_NAME" > version.txt
          echo "已拷贝 _worker.js 并写入 version.txt"

      - name: 报告错误（若未找到产物）
        if: env.UPDATE_NEEDED == 'true' && steps.locate_worker.outputs.WORKER_FOUND != 'true'
        shell: bash
        run: |
          echo -e "\033[31m错误：未找到构建产物 dist/worker.js 或 _worker.js，构建可能失败。请查看上面的构建日志和 upstream/dist 列表以定位问题。\033[0m"
          exit 1

      - name: 提交更改
        if: env.UPDATE_NEEDED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔄 自动构建并同步最新 Worker 版本：${{ env.TAG_NAME }}（随机种子构建）"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          push_options: --force
